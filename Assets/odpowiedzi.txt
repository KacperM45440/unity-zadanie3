1. Zminimalizowanie zasobów - upraszczając elementy gry, zwiększając wydajność skryptów oraz używając ponownie dostępnych nam assetów odciążamy zapotrzebowanie na obliczenia aplikacji.
W tym projekcie można na przykład wyłączyć "raycast target" elementom, z którymi nigdy nie będziemy wchodzić w interakcję.

2. Caching - Możemy przenieść często używane elementy w programie do pamięci podręcznej, eliminując potrzebę inicjalizowania ich więcej razy, niż trzeba.
Do pamięci cache możnaby załadować na przykład grafiki, dźwięki i animacje, ponieważ będą one niezmienne w całym quizie.

3. Lazy loading - Pobieramy elementy gry tylko wtedy, kiedy są nam one potrzebne, co również odciąża procesy ładowania.
Jeżeli nasz quiz miałby, przykładowo, 99999 pytań, każdorazowe wejście do gry wymagałoby od nas poczekanie, aż załadują się wszystkie pytania. Zamiast tego możemy przejść na kompromis ładowania pytania dopiero przy przechodzeniu do następnego.

CPU to profiler użycia procesora. Zawiera przegląd wszystkich istotnych obszarów aplikacji, które wykonywane są w czasie, takich jak wywoływanie skryptów i animacji. Reprezentowany jest graficznie poprzez wykres, co ułatwia znalezienie i zobrazowanie miejsc, które wymagają dużo obliczeń.
Jego wartość milisekundach możemy wykorzystać do obliczenia framerate'u programu (np. 1000/16ms ~~ 60fps).

GPU jest odpowiednikiem tego modułu dla karty graficznej. Zajmuje się głównie badaniem elementów wizualnych i renderowanych (z wyjątkiem UI). Pokazuje również ilość widocznych trójkątów i wierzchołków.
